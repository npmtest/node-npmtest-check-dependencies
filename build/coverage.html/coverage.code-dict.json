{"/home/travis/build/npmtest/node-npmtest-check-dependencies/test.js":"/* istanbul instrument in package npmtest_check_dependencies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-check-dependencies/lib.npmtest_check_dependencies.js":"/* istanbul instrument in package npmtest_check_dependencies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_check_dependencies = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_check_dependencies = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-check-dependencies/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-check-dependencies && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_check_dependencies */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_check_dependencies\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_check_dependencies.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_check_dependencies.rollup.js'] =\n            local.assetsDict['/assets.npmtest_check_dependencies.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_check_dependencies.__dirname +\n                    '/lib.npmtest_check_dependencies.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-check-dependencies/node_modules/check-dependencies/lib/check-dependencies.js":"'use strict';\n\nconst fs = require('fs');\nconst path = require('path');\nconst chalk = require('chalk');\nconst findup = require('findup-sync');\nconst semver = require('semver');\nconst spawn = require('child_process').spawn;\nconst spawnSync = require('child_process').spawnSync;\n\nconst checkDependenciesHelper = (syncOrAsync, config, callback) => {\n    // We treat the signature:\n    //     checkDependencies(callback)\n    // as:\n    //     checkDependencies({}, callback)\n\n    if (syncOrAsync === 'async') {\n        // Catch all cases where `config` is not an object - even if it's not a function\n        // so it's useless here, we need it to be assigned to `callback` to provide\n        // to the error message.\n        if (typeof callback !== 'function' && (typeof config !== 'object' || config == null)) {\n            callback = config;\n            config = null;\n        }\n        if (typeof callback !== 'function') {\n            if (callback == null) {\n                // In the async mode we return the promise anyway; assign callback\n                // to noop to keep code consistency.\n                callback = () => {/* noop */};\n            } else {\n                // If callback was simply not provided, we assume the user wanted\n                // to handle the returned promise. If it was passed but not a function\n                // we assume user error and throw.\n                throw new TypeError(`The provided callback wasn't a function! Got: ${ callback }`);\n            }\n        }\n    }\n\n    const win32 = process.platform === 'win32';\n    const output = {log: [], error: []};\n\n    let depsDirName, packageJson, pkgManagerPath;\n\n    let installPrunePromise = Promise.resolve();\n    let success = true;\n    let installNeeded = false;\n    let pruneNeeded = false;\n\n    const options = Object.assign({\n        packageManager: 'npm',\n        onlySpecified: false,\n        install: false,\n        scopeList: ['dependencies', 'devDependencies'],\n        optionalScopeList: ['optionalDependencies'],\n        verbose: false,\n        checkGitUrls: false,\n        checkCustomPackageNames: false,\n        log: console.log.bind(console),\n        error: console.error.bind(console),\n    }, config);\n\n    const packageJsonName = options.packageManager === 'npm' ? 'package.json' : 'bower.json';\n    const packageJsonRegex = options.packageManager === 'npm' ? /package\\.json$/ : /bower\\.json$/;\n    depsDirName = options.packageManager === 'npm' ? 'node_modules' : 'bower_components';\n\n    const log = message => {\n        output.log.push(message);\n        if (options.verbose) {\n            options.log(message);\n        }\n    };\n\n    const error = message => {\n        output.error.push(message);\n        if (options.verbose) {\n            options.error(message);\n        }\n    };\n\n    const finish = () => {\n        output.status = success ? 0 : 1;\n        if (syncOrAsync === 'async') {\n            callback(output);\n            return Promise.resolve(output);\n        }\n        return output;\n    };\n\n    const missingPackageJson = () => {\n        success = false;\n        error(`Missing ${ packageJsonName }!`);\n        return finish();\n    };\n\n    options.packageDir = options.packageDir || findup(packageJsonName);\n    if (!options.packageDir) {\n        return missingPackageJson();\n    }\n    options.packageDir = path.resolve(options.packageDir.replace(packageJsonRegex, ''));\n\n    packageJson = `${ options.packageDir }/${ packageJsonName }`;\n    if (!fs.existsSync(packageJson)) {\n        return missingPackageJson();\n    }\n    packageJson = require(packageJson);\n\n    if (options.packageManager === 'bower') {\n        const bowerConfig = require('bower-config').create(options.packageDir).load();\n        depsDirName = bowerConfig._config.directory;\n    }\n\n    // Bower uses a different name (with a dot) for package data of dependencies.\n    const depsJsonName = options.packageManager === 'npm' ? 'package.json' : '.bower.json';\n\n    if (options.packageManager === 'bower') {\n        // Allow a local bower.\n        pkgManagerPath = findup('node_modules/bower/bin/bower');\n    }\n\n    const depsDir = `${ options.packageDir }/${ depsDirName }`;\n\n    const getDepsMappingsFromScopeList = scopeList =>\n        // Get names of all packages specified in package.json/bower.json at keys from scopeList\n        // together with specified version numbers.\n        scopeList.reduce((result, scope) => Object.assign(result, packageJson[scope]), {});\n\n    // Make sure each package from `scopeList` is present and matches the specified version range.\n    // Packages from `optionalScopeList` may not be present but if they are, they are required\n    // to match the specified version range.\n    const checkPackage = pkg => {\n        const name = pkg.name;\n        let versionString = pkg.versionString;\n\n        const depDir = `${ depsDir }/${ name }`;\n        const depJson = `${ depDir }/${ depsJsonName }`;\n\n        if (!fs.existsSync(depDir) || !fs.existsSync(depJson)) {\n            if (pkg.isOptional) {\n                log(`${ name }: ${ chalk.red('not installed!') }`);\n            } else {\n                error(`${ name }: ${ chalk.red('not installed!') }`);\n                success = false;\n            }\n            return;\n        }\n\n        // Let's look if we can get a valid version from a Git URL\n        if (options.checkGitUrls && /\\.git.*#v?(.+)$/.test(versionString)) {\n            versionString = (/#v?(.+)$/.exec(versionString))[1];\n            if (!semver.valid(versionString)) {\n                return;\n            }\n        }\n\n        // Quick and dirty check - make sure we're not dealing with a URL\n        if (/\\//.test(versionString)) {\n            return;\n        }\n\n        // Bower has the option to specify a custom name, e.g. 'packageOld' : 'package#1.2.3'\n        if (options.checkCustomPackageNames && options.packageManager !== 'npm') {\n            // Let's look if we can get a valid version from a custom package name (with a # in it)\n            if (/\\.*#v?(.+)$/.test(versionString)) {\n                versionString = (/#v?(.+)$/.exec(versionString))[1];\n                if (!semver.valid(versionString)) {\n                    return;\n                }\n            }\n        }\n\n        // If we are dealing with a custom package name, semver check won't work - skip it\n        if (/#/.test(versionString)) {\n            return;\n        }\n\n        // Skip version checks for 'latest' - the semver module won't help here and the check\n        // would have to consult the npm server, making the operation slow.\n        if (versionString === 'latest') {\n            return;\n        }\n\n        const depVersion = require(depJson).version;\n        if (semver.satisfies(depVersion, versionString)) {\n            log(`${ name }: installed: ${ chalk.green(depVersion)\n                }, expected: ${ chalk.green(versionString) }`);\n        } else {\n            success = false;\n            error(`${ name }: installed: ${ chalk.red(depVersion)\n                }, expected: ${ chalk.green(versionString) }`);\n        }\n    };\n\n    const depsMappings = getDepsMappingsFromScopeList(options.scopeList);\n    const optionalDepsMappings = getDepsMappingsFromScopeList(options.optionalScopeList);\n    const fullDepsMappings = Object.assign({}, depsMappings, optionalDepsMappings);\n\n    Object.keys(depsMappings).forEach(name => {\n        checkPackage({name, versionString: depsMappings[name], isOptional: false});\n    });\n\n    Object.keys(optionalDepsMappings).forEach(name => {\n        checkPackage({name, versionString: optionalDepsMappings[name], isOptional: true});\n    });\n\n    installNeeded = !success;\n\n    if (options.onlySpecified) {\n        fs\n            .readdirSync(depsDir)\n\n            // Ignore hidden directories\n            .filter(depName => depName[0] !== '.')\n\n            // Ignore files\n            .filter(depName => fs.lstatSync(`${ depsDir }/${ depName }`).isDirectory())\n\n            .forEach(depName => {\n                let depSubDirName;\n\n                // Scoped packages\n                if (depName[0] === '@') {\n                    depName = fs.readdirSync(`${ depsDir }/${ depName }`)[0];\n\n                    // Ignore weird directories - if it just looks like a scoped package but\n                    // isn't one, just skip it.\n                    if (depSubDirName && !fullDepsMappings[depName]) {\n                        success = false;\n                        pruneNeeded = true;\n                        error(`Package ${ depName } installed, though it shouldn\\'t be`);\n                    }\n                    return;\n                }\n\n                // Regular packages\n                if (!fullDepsMappings[depName]) {\n                    success = false;\n                    pruneNeeded = true;\n                    error(`Package ${ depName } installed, though it shouldn\\'t be`);\n                }\n            });\n    }\n\n    if (success) {\n        output.depsWereOk = true;\n        return finish();\n    }\n    output.depsWereOk = false;\n\n    if (!options.install) {\n        if (options.onlySpecified) {\n            error(`Invoke ${ chalk.green(`${ options.packageManager } prune`) } and ${\n                chalk.green(`${ options.packageManager } install`)\n                } to install missing packages and remove excessive ones`);\n        } else {\n            error(`Invoke ${ chalk.green(`${ options.packageManager } install`)\n                } to install missing packages`);\n        }\n        return finish();\n    }\n\n\n    const installOrPrune = mode => {\n        log(`Invoking ${ chalk.green(`${ options.packageManager } ${ mode }`) }...`);\n\n        // If we're using a direct path, on Windows we need to invoke it via `node path`, not\n        // `cmd /c path`. In UNIX systems we can execute the command directly so no need to wrap.\n        let msg, spawnReturn;\n        const method = syncOrAsync === 'sync' ? spawnSync : spawn;\n\n        if (win32) {\n            spawnReturn = method(pkgManagerPath ? 'node' : 'cmd',\n                (pkgManagerPath ? [pkgManagerPath] : ['/c', options.packageManager]).concat(mode),\n                {\n                    cwd: options.packageDir,\n                    stdio: 'inherit',\n                });\n        } else {\n            spawnReturn = method(options.packageManager,\n                [mode],\n                {\n                    cwd: options.packageDir,\n                    stdio: 'inherit',\n                });\n        }\n\n        if (syncOrAsync === 'sync') {\n            if (spawnReturn.status !== 0) {\n                msg = `${ options.packageManager } ${ mode } failed with code: ${\n                    chalk.red(spawnReturn.status) }`;\n                throw new Error(msg);\n            }\n            return null;\n        }\n        return new Promise((resolve, reject) => {\n            spawnReturn.on('close', code => {\n                if (code === 0) {\n                    resolve();\n                    return;\n                }\n                msg = `${ options.packageManager } ${ mode } failed with code: ${\n                    chalk.red(code) }`;\n                error(msg);\n                reject(msg);\n            });\n        });\n    };\n\n    const installMissing = () => installOrPrune('install');\n    const pruneExcessive = () => installOrPrune('prune');\n\n    if (syncOrAsync === 'sync') {\n        try {\n            if (installNeeded) {\n                installMissing();\n            }\n\n            if (pruneNeeded) {\n                pruneExcessive();\n            }\n\n            success = true;\n        } catch (error) {\n            success = false;\n        }\n        return finish();\n    }\n\n    // Async scenario\n    if (installNeeded) {\n        installPrunePromise = installPrunePromise.then(installMissing);\n    }\n\n    if (pruneNeeded) {\n        installPrunePromise = installPrunePromise.then(pruneExcessive);\n    }\n\n    return installPrunePromise\n        .then(() => {\n            success = true;\n            return finish();\n        })\n        .catch(() => {\n            success = false;\n            return finish();\n        });\n};\n\nmodule.exports = (cfg, cb) => checkDependenciesHelper('async', cfg, cb);\nmodule.exports.sync = (cfg, cb) => checkDependenciesHelper('sync', cfg, cb);\n"}